// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TestesBeneficios.Infra.Data.Context;

#nullable disable

namespace TestesBeneficios.Infra.Data.Migrations
{
    [DbContext(typeof(TesteContext))]
    [Migration("20221208193140_Usuri")]
    partial class Usuri
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("TestesBeneficios.Domain.Entidades.Beneficiario", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Cpf")
                        .IsRequired()
                        .HasColumnType("Varchar(14)")
                        .HasColumnName("Cpf");

                    b.Property<DateTime>("DataNascimento")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("Varchar(100)")
                        .HasColumnName("Nome");

                    b.Property<string>("NomeMae")
                        .IsRequired()
                        .HasColumnType("Varchar(100)")
                        .HasColumnName("NomeMae");

                    b.Property<string>("Rg")
                        .IsRequired()
                        .HasColumnType("Varchar(30)")
                        .HasColumnName("Rg");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Beneficiarios", (string)null);
                });

            modelBuilder.Entity("TestesBeneficios.Domain.Entidades.Empresa", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Cnpj")
                        .IsRequired()
                        .HasColumnType("Varchar(100)")
                        .HasColumnName("CNPJ");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("datetime2");

                    b.Property<string>("NomeFantasia")
                        .IsRequired()
                        .HasColumnType("Varchar(100)")
                        .HasColumnName("NomeFantasia");

                    b.Property<string>("RazaoSocial")
                        .IsRequired()
                        .HasColumnType("Varchar(100)")
                        .HasColumnName("RazaoSocial");

                    b.HasKey("Id");

                    b.ToTable("Empresas", (string)null);
                });

            modelBuilder.Entity("TestesBeneficios.Domain.Entidades.Produto", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasColumnType("Varchar(100)")
                        .HasColumnName("Codigo");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("IdEmpresa")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("Varchar(100)")
                        .HasColumnName("Nome");

                    b.HasKey("Id");

                    b.HasIndex("IdEmpresa");

                    b.ToTable("Produtos", (string)null);
                });

            modelBuilder.Entity("TestesBeneficios.Domain.Entidades.ProdutoAbrangencia", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Cidade")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Cidade");

                    b.Property<Guid>("IdProduto")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UF")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("UF");

                    b.HasKey("Id");

                    b.HasIndex("IdProduto");

                    b.ToTable("Abrangencia", (string)null);
                });

            modelBuilder.Entity("TestesBeneficios.Domain.Entidades.ProdutoFaixaEtaria", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("FaixaAte")
                        .HasColumnType("int")
                        .HasColumnName("FaixaAte");

                    b.Property<int>("FaixaDe")
                        .HasColumnType("int")
                        .HasColumnName("FaixaDe");

                    b.Property<Guid>("IdProduto")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("Preco")
                        .HasColumnType("real")
                        .HasColumnName("Preco");

                    b.HasKey("Id");

                    b.HasIndex("IdProduto");

                    b.ToTable("FaixaEtaria", (string)null);
                });

            modelBuilder.Entity("TestesBeneficios.Domain.Entidades.Produto", b =>
                {
                    b.HasOne("TestesBeneficios.Domain.Entidades.Empresa", "Empresa")
                        .WithMany("Produtos")
                        .HasForeignKey("IdEmpresa")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Empresa");
                });

            modelBuilder.Entity("TestesBeneficios.Domain.Entidades.ProdutoAbrangencia", b =>
                {
                    b.HasOne("TestesBeneficios.Domain.Entidades.Produto", "Produto")
                        .WithMany("Abrangencia")
                        .HasForeignKey("IdProduto")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Produto");
                });

            modelBuilder.Entity("TestesBeneficios.Domain.Entidades.ProdutoFaixaEtaria", b =>
                {
                    b.HasOne("TestesBeneficios.Domain.Entidades.Produto", "Produto")
                        .WithMany("FaixaEtaria")
                        .HasForeignKey("IdProduto")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Produto");
                });

            modelBuilder.Entity("TestesBeneficios.Domain.Entidades.Empresa", b =>
                {
                    b.Navigation("Produtos");
                });

            modelBuilder.Entity("TestesBeneficios.Domain.Entidades.Produto", b =>
                {
                    b.Navigation("Abrangencia");

                    b.Navigation("FaixaEtaria");
                });
#pragma warning restore 612, 618
        }
    }
}
